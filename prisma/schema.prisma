generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id    Int    @id @default(autoincrement())
  name  String
  rank  Int
  users User[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Salary {
  id       Int    @id @default(autoincrement())
  name     String
  baseRate Float
  users    User[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Client {
  id       Int      @id @default(autoincrement())
  name     String
  address  String
  branches Branch[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Commission {
  id             Int      @id @default(autoincrement())
  branchId       Int      @map("id_Branch")
  userId         Int      @map("id_user")
  commissionSale Float    @map("comission_sale")
  dateCreation   DateTime @map("date_creation")

  branch Branch @relation(fields: [branchId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
  sales  Sale[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Branch {
  id            Int    @id @default(autoincrement())
  name          String
  address       String
  Coordinate    String?
  phoneNumber   String
  manager       String
  salePrice     Float?
  razonSocial   String?
  rfc           String?
  regimenFiscal String?
  codigoPostal  String?
  usoCfdi       String?
  clientId      Int
  client        Client @relation(fields: [clientId], references: [id])

  users            User[]
  commissions      Commission[]
  sales            Sale[]
  deliveryBranches DeliveryBranch[]
  tickets          Ticket[] // <- relación inversa de Ticket.branch

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}
model Area {
  id    Int    @id @default(autoincrement())
  name  String

  users User[] // Relación inversa con User

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}

model User {
  id          Int      @id @default(autoincrement())
  profileId   Int
  salaryId    Int
  name        String
  phoneNumber String
  rfc         String
  hiringDate  DateTime
  branchId    Int?
  area        Int?

  profile Profile @relation(fields: [profileId], references: [id])
  salary  Salary  @relation(fields: [salaryId], references: [id])
  branch  Branch? @relation(fields: [branchId], references: [id])
  area   Area?   @relation(fields: [areaId], references: [id])

  logins           Login[]
  commissions      Commission[]
  sales            Sale[]
  bonuses          Bonus[]
  penalties        PenaltyCharge[]
  attendances      Attendance[]
  deliveryBranches DeliveryBranch[] // <- inversa de DeliveryBranch.user

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Login {
  id       Int    @id @default(autoincrement())
  user     String
  password String
  userId   Int

  userRel User @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Sale {
  id            Int @id @default(autoincrement())
  commissionId  Int?
  userId        Int
  volume        Int
  productSaleId Int
  branchId      Int // <- requerido para relación con Branch

  commission  Commission?  @relation(fields: [commissionId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
  productSale ProductSale @relation(fields: [productSaleId], references: [id])
  branch      Branch      @relation(fields: [branchId], references: [id])

  ticketSales TicketSale[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model TicketSale {
  id       Int @id @default(autoincrement())
  ticketId Int
  saleId   Int

  ticket Ticket @relation(fields: [ticketId], references: [id])
  sale   Sale   @relation(fields: [saleId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Price {
  id            Int    @id @default(autoincrement())
  description   String
  price         Float
  tax           Float
  productSaleId Int

  productSale ProductSale @relation(fields: [productSaleId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model ProductSale {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  brand       String
  type        String
  price       Float

  sales  Sale[]
  prices Price[] // <- relación inversa de Price.productSale

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Ticket {
  id          Int      @id @default(autoincrement())
  branchId    Int
  payType     Int
  invoiced    Boolean
  uuid        String
  invoiceDate DateTime
  folio       String

  branch           Branch           @relation(fields: [branchId], references: [id])
  ticketSales      TicketSale[]
  deliveryBranches DeliveryBranch[] // <- relación inversa de DeliveryBranch.ticket

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model DeliveryBranch {
  id       Int      @id @default(autoincrement())
  userId   Int?     // <- ahora opcional
  branchId Int?     // <- ahora opcional
  ticketId Int?     // <- ya era opcional
  priority Int
  status   Int

  user   User?   @relation(fields: [userId], references: [id])
  branch Branch? @relation(fields: [branchId], references: [id])
  ticket Ticket? @relation(fields: [ticketId], references: [id])
  routesDeliveries RoutesDelivery[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model RoutesDay {
  id       Int      @id @default(autoincrement())
  name     String
  status   Boolean
  routeDay DateTime

  routesDeliveries RoutesDelivery[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model RoutesDelivery {
  id               Int @id @default(autoincrement())
  deliveryBranchId Int
  routesDayId      Int

  deliveryBranch DeliveryBranch @relation(fields: [deliveryBranchId], references: [id])
  routesDay      RoutesDay      @relation(fields: [routesDayId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Bonus {
  id          Int      @id @default(autoincrement())
  userId      Int
  amount      Float
  description String
  date        DateTime

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model PenaltyCharge {
  id          Int      @id @default(autoincrement())
  userId      Int
  amount      Float
  description String
  date        DateTime

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Attendance {
  id               Int      @id @default(autoincrement())
  userId           Int
  date             DateTime
  attendanceTypeId Int
  workedHours      Float
  paid             Boolean
  notes            String

  user           User           @relation(fields: [userId], references: [id])
  attendanceType AttendanceType @relation(fields: [attendanceTypeId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model AttendanceType {
  id          Int          @id @default(autoincrement())
  name        String
  paidDay     Boolean
  payMult     Float
  attendances Attendance[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Supplier {
  id          Int    @id @default(autoincrement())
  name        String
  phoneNumber String
  costs       Cost[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Product {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  brand       String
  type        String
  costs       Cost[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Cost {
  id         Int   @id @default(autoincrement())
  price      Float
  supplierId Int
  productId  Int

  supplier Supplier  @relation(fields: [supplierId], references: [id])
  product  Product   @relation(fields: [productId], references: [id])
  expenses Expense[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model ExpenseType {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  expenses    Expense[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Expense {
  id            Int      @id @default(autoincrement())
  costId        Int
  expenseTypeId Int
  units         Int
  total         Float
  date          DateTime

  filePath      String?  // <- Nuevo campo opcional para ruta del archivo

  cost        Cost        @relation(fields: [costId], references: [id])
  expenseType ExpenseType @relation(fields: [expenseTypeId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}
